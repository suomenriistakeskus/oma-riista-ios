// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vectortile.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Vectortile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - VectortileRoot

@implementation VectortileRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - VectortileRoot_FileDescriptor

static GPBFileDescriptor *VectortileRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"vector_tile"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Tile

@implementation Tile

@dynamic layersArray, layersArray_Count;

typedef struct Tile__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *layersArray;
} Tile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "layersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Tile_Layer),
        .number = Tile_FieldNumber_LayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Tile__storage_, layersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tile class]
                                     rootClass:[VectortileRoot class]
                                          file:VectortileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tile__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const GPBExtensionRange ranges[] = {
      { .start = 16, .end = 8192 },
    };
    [localDescriptor setupExtensionRanges:ranges
                                    count:(uint32_t)(sizeof(ranges) / sizeof(GPBExtensionRange))];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Tile_GeomType

GPBEnumDescriptor *Tile_GeomType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Point\000Linestring\000Polygon\000";
    static const int32_t values[] = {
        Tile_GeomType_Unknown,
        Tile_GeomType_Point,
        Tile_GeomType_Linestring,
        Tile_GeomType_Polygon,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Tile_GeomType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Tile_GeomType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Tile_GeomType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Tile_GeomType_Unknown:
    case Tile_GeomType_Point:
    case Tile_GeomType_Linestring:
    case Tile_GeomType_Polygon:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Tile_Value

@implementation Tile_Value

@dynamic hasStringValue, stringValue;
@dynamic hasFloatValue, floatValue;
@dynamic hasDoubleValue, doubleValue;
@dynamic hasIntValue, intValue;
@dynamic hasUintValue, uintValue;
@dynamic hasSintValue, sintValue;
@dynamic hasBoolValue, boolValue;

typedef struct Tile_Value__storage_ {
  uint32_t _has_storage_[1];
  float floatValue;
  NSString *stringValue;
  double doubleValue;
  int64_t intValue;
  uint64_t uintValue;
  int64_t sintValue;
} Tile_Value__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stringValue",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Value_FieldNumber_StringValue,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tile_Value__storage_, stringValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "floatValue",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Value_FieldNumber_FloatValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tile_Value__storage_, floatValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "doubleValue",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Value_FieldNumber_DoubleValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Tile_Value__storage_, doubleValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "intValue",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Value_FieldNumber_IntValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Tile_Value__storage_, intValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uintValue",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Value_FieldNumber_UintValue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Tile_Value__storage_, uintValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sintValue",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Value_FieldNumber_SintValue,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Tile_Value__storage_, sintValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "boolValue",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Value_FieldNumber_BoolValue,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tile_Value class]
                                     rootClass:[VectortileRoot class]
                                          file:VectortileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tile_Value__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const GPBExtensionRange ranges[] = {
      { .start = 8, .end = 536870912 },
    };
    [localDescriptor setupExtensionRanges:ranges
                                    count:(uint32_t)(sizeof(ranges) / sizeof(GPBExtensionRange))];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Tile)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Tile_Feature

@implementation Tile_Feature

@dynamic hasId_p, id_p;
@dynamic tagsArray, tagsArray_Count;
@dynamic hasType, type;
@dynamic geometryArray, geometryArray_Count;

typedef struct Tile_Feature__storage_ {
  uint32_t _has_storage_[1];
  Tile_GeomType type;
  GPBUInt32Array *tagsArray;
  GPBUInt32Array *geometryArray;
  uint64_t id_p;
} Tile_Feature__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Feature_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tile_Feature__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Feature_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Tile_Feature__storage_, tagsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Tile_GeomType_EnumDescriptor,
        .number = Tile_Feature_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tile_Feature__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "geometryArray",
        .dataTypeSpecific.className = NULL,
        .number = Tile_Feature_FieldNumber_GeometryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Tile_Feature__storage_, geometryArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tile_Feature class]
                                     rootClass:[VectortileRoot class]
                                          file:VectortileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tile_Feature__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Tile)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Tile_Layer

@implementation Tile_Layer

@dynamic hasVersion, version;
@dynamic hasName, name;
@dynamic featuresArray, featuresArray_Count;
@dynamic keysArray, keysArray_Count;
@dynamic valuesArray, valuesArray_Count;
@dynamic hasExtent, extent;

typedef struct Tile_Layer__storage_ {
  uint32_t _has_storage_[1];
  uint32_t extent;
  uint32_t version;
  NSString *name;
  NSMutableArray *featuresArray;
  NSMutableArray *keysArray;
  NSMutableArray *valuesArray;
} Tile_Layer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "name",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Tile_Layer_FieldNumber_Name,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(Tile_Layer__storage_, name),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "featuresArray",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Tile_Feature),
        .core.number = Tile_Layer_FieldNumber_FeaturesArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(Tile_Layer__storage_, featuresArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "keysArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Tile_Layer_FieldNumber_KeysArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(Tile_Layer__storage_, keysArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "valuesArray",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Tile_Value),
        .core.number = Tile_Layer_FieldNumber_ValuesArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(Tile_Layer__storage_, valuesArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueUInt32 = 4096U,
        .core.name = "extent",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Tile_Layer_FieldNumber_Extent,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(Tile_Layer__storage_, extent),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueUInt32 = 1U,
        .core.name = "version",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Tile_Layer_FieldNumber_Version,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(Tile_Layer__storage_, version),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tile_Layer class]
                                     rootClass:[VectortileRoot class]
                                          file:VectortileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(Tile_Layer__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    static const GPBExtensionRange ranges[] = {
      { .start = 16, .end = 536870912 },
    };
    [localDescriptor setupExtensionRanges:ranges
                                    count:(uint32_t)(sizeof(ranges) / sizeof(GPBExtensionRange))];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Tile)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
